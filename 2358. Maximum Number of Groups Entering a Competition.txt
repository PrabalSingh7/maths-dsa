2358. Maximum Number of Groups Entering a Competition
Medium
460
86
Companies
You are given a positive integer array grades which represents the grades of students in a university. You would like to enter all these students into a competition in ordered non-empty groups, such that the ordering meets the following conditions:

The sum of the grades of students in the ith group is less than the sum of the grades of students in the (i + 1)th group, for all groups (except the last).
The total number of students in the ith group is less than the total number of students in the (i + 1)th group, for all groups (except the last).
Return the maximum number of groups that can be formed.

 

Example 1:

Input: grades = [10,6,12,7,3,5]
Output: 3
Explanation: The following is a possible way to form 3 groups of students:
- 1st group has the students with grades = [12]. Sum of grades: 12. Student count: 1
- 2nd group has the students with grades = [6,7]. Sum of grades: 6 + 7 = 13. Student count: 2
- 3rd group has the students with grades = [10,3,5]. Sum of grades: 10 + 3 + 5 = 18. Student count: 3
It can be shown that it is not possible to form more than 3 groups.
Example 2:

Input: grades = [8,8]
Output: 1
Explanation: We can only form 1 group, since forming 2 groups would lead to an equal number of students in both groups.
 

Constraints:

1 <= grades.length <= 105
1 <= grades[i] <= 105
Accepted
28.1K
Submissions
41.5K
Acceptance Rate
67.7%




C++ || Intuitive Approach || GREEDY || explained
_prabal_singh_
100 Days Badge 2022
4
a minute ago
Intuition
INTUITIVE ITERATION

Approach
If, we sort the grades in ascending order , we will just have to form groups of increasing size by 1 till we exhaust the vector. This will take care of the fiven two conditions that we have to consider.
In practical counting of groups the sort is not even necessary cause , we just care about the net possible groups that can be formed.

Complexity
Time complexity : O(n)
Space complexity : O(1)
Code
class Solution {
public:
    int maximumGroups(vector<int>& grades) {
        //declaring helping variables to continuously update group size & number of groups formed.
        int group_size = 1;
        int count = 0;

        //looping from 0->end of vector, with updations equal to group size
        for(int i=0; i<grades.size(); i = i+group_size) {
            count++;
            group_size++;
        }

        return count;
    }
};
c2826b72-fb1c-464c-9f95-d9e578abcaf3_1674104075.4732099.jpeg