1010. Pairs of Songs With Total Durations Divisible by 60
Medium
3.8K
148
Companies
You are given a list of songs where the ith song has a duration of time[i] seconds.

Return the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.

 

Example 1:

Input: time = [30,20,150,100,40]
Output: 3
Explanation: Three pairs have a total duration divisible by 60:
(time[0] = 30, time[2] = 150): total duration 180
(time[1] = 20, time[3] = 100): total duration 120
(time[1] = 20, time[4] = 40): total duration 60
Example 2:

Input: time = [60,60,60]
Output: 3
Explanation: All three pairs have a total duration of 120, which is divisible by 60.
 

Constraints:

1 <= time.length <= 6 * 104
1 <= time[i] <= 500
Accepted
239.1K
Submissions
453.3K
Acceptance Rate
52.7%



class Solution {
public:
    int numPairsDivisibleBy60(vector<int>& time) {
        unordered_map<int,int> mp;
        int count=0;

        for(auto k : time)  {
            for(int i=k/60; i<=17; i++) {
                int x = (60*i) - k;
                count += mp[x];
            }
            mp[k]++;
        }

        return count;
    }
};



Pairs of Songs With Total Durations Divisible by 60


â›³âœ¨ C++ || Math + Counting || ðŸ’»ðŸ“ƒðŸ–Š Commented Code
_prabal_singh_
100 Days Badge 2022
15
a few seconds ago
Intuition
Basic Mathematical Counting Problem .

Approach
We, will maintain an map for storing all the pre-occured elements AND for each index element search for the possible partner (forming appropriate pair).
This pssible partner value will simply be in the range of [0,1000] as that's the range of elements [0,500]. AND this means multiples of 60 from 0 to 16.
Hence, possible partner will be
for i in range [0,17]
  possible_partner = (60 * i) - curr_index_element
Then incremnet the pair_count by the number of occurences of possible_partner.
download (1).jfif

Complexity
Time complexity : O(N*16)
Space complexity: O(N)
Code
class Solution {
public:
    int numPairsDivisibleBy60(vector<int>& time) {
        //helping data structure
        unordered_map<int,int> mp;
        int pair_count=0;

        for(auto curr_index_element : time)  {
            //trying to find possible pair partner 
            for(int i=curr_index_element/60; i<17; i++) {
                int possible_partner = (60*i) - curr_index_element;
                //incrementing our pair_count by number of its occurence
                pair_count += mp[possible_partner];
            }
            mp[curr_index_element]++;
        }

        return pair_count;
    }
};
images.jfif