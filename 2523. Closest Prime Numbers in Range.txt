2523. Closest Prime Numbers in Range
User Accepted:3723
User Tried:4852
Total Accepted:3969
Total Submissions:13251
Difficulty:Medium
Given two positive integers left and right, find the two integers num1 and num2 such that:

left <= nums1 < nums2 <= right .
nums1 and nums2 are both prime numbers.
nums2 - nums1 is the minimum amongst all other pairs satisfying the above conditions.
Return the positive integer array ans = [nums1, nums2]. If there are multiple pairs satisfying these conditions, return the one with the minimum nums1 value or [-1, -1] if such numbers do not exist.

A number greater than 1 is called prime if it is only divisible by 1 and itself.

 

Example 1:

Input: left = 10, right = 19
Output: [11,13]
Explanation: The prime numbers between 10 and 19 are 11, 13, 17, and 19.
The closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].
Since 11 is smaller than 17, we return the first pair.
Example 2:

Input: left = 4, right = 6
Output: [-1,-1]
Explanation: There exists only one prime number in the given range, so the conditions cannot be satisfied.
 

Constraints:

1 <= left <= right <= 106
 


class Solution {
public:
    bool isPrime(int n) {
        // Corner cases
        if (n <= 1)
            return false;
        if (n <= 3)
            return true;

        // This is checked so that we can skip
        // middle five numbers in below loop
        if (n % 2 == 0 || n % 3 == 0)
            return false;

        // Using concept of prime number can be represented in form of (6*n + 1) or(6*n - 1) hence we have to go for every multiple of 6 and
        // prime number would always be 1 less or 1 more than the multiple of 6.

        /*
           1. Here i is of the form 5 + 6K where K>=0
           2. i+1, i+3, i+5 are even numbers (6 + 6K). N is not an even number
           3. Because N%2 and N%3 checks are done in the before step
           4. Hence i+1, i+3, i+5 can't be N's divisors.
           5. i+4 is 9 + 6K which is a 3 multiple.
           6. N is not a 3 multiple hence i+4 can't be it's divisor
           Hence we only check if N is a divisor of i or i+2.
        */
        for (int i = 5; i * i <= n; i = i + 6)
            if (n % i == 0 || n % (i + 2) == 0)
                return false;

        return true;
    }
    
    vector<int> closestPrimes(int left, int right) {
        vector<int> primesInRange;
        vector<int> result {-1,-1};
        int minYet = INT_MAX;
        
        for(int i=left; i<=right; i++)  {
            if(isPrime(i))  primesInRange.push_back(i);
        }
        
        if(primesInRange.size()<=1) return result;
        
        for(int i=0; i<primesInRange.size()-1; i++)   {
            int u = primesInRange[i];
            int v = primesInRange[i+1];
            int diff = v - u;
            if(diff<minYet) {
                result[0] = u;
                result[1] = v;
                minYet = diff;
            }
            else if(diff==minYet)   {
                if(u<result[0]) {
                    result[0] = u;
                    result[1] = v;
                }
            }
        }
        
        return result;
    }
};